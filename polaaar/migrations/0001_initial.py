# Generated by Django 2.2.5 on 2019-11-03 11:40

from django.conf import settings
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Biome',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=300, null=True)),
                ('biome_level', models.CharField(choices=[('L1', 'Level_1'), ('L2', 'Level_2'), ('L3', 'Level_3'), ('L4', 'Level_4'), ('L5', 'Level_5')], max_length=300)),
                ('parent_biome', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='BiomeName', to='polaaar.Biome')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Environment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('env_sample_name', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateField()),
                ('Latitude', models.DecimalField(decimal_places=5, max_digits=10)),
                ('Longitude', models.DecimalField(decimal_places=5, max_digits=10)),
                ('link_climate_info', models.URLField(blank=True, null=True)),
                ('env_numeric_value', models.DecimalField(blank=True, decimal_places=5, max_digits=15, null=True)),
                ('env_text_value', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'verbose_name_plural': 'Environment samples',
                'ordering': ['env_sample_name'],
            },
        ),
        migrations.CreateModel(
            name='EventType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Occurrence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('occurrenceID', models.CharField(blank=True, max_length=255, null=True)),
                ('occurrence_notes', models.TextField(blank=True, null=True)),
                ('occurrence_status', models.TextField(blank=True, null=True)),
                ('occurrence_class', models.TextField(blank=True, null=True)),
                ('catalog_number', models.CharField(blank=True, max_length=255, null=True)),
                ('date_identified', models.DateField(blank=True, null=True)),
                ('other_catalog_numbers', models.TextField(blank=True, null=True)),
                ('recorded_by', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='package',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='sampling_method',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shortname', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ['shortname'],
            },
        ),
        migrations.CreateModel(
            name='Sequences',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sequence_name', models.CharField(max_length=255)),
                ('MID', models.CharField(blank=True, max_length=255, null=True)),
                ('subspecf_gen_lin', models.CharField(blank=True, max_length=50, null=True)),
                ('target_gene', models.CharField(blank=True, max_length=50, null=True)),
                ('target_subfragment', models.CharField(blank=True, max_length=50, null=True)),
                ('type', models.CharField(blank=True, max_length=50, null=True)),
                ('primerName_forward', models.CharField(blank=True, max_length=50, null=True)),
                ('primerName_reverse', models.CharField(blank=True, max_length=50, null=True)),
                ('primer_forward', models.CharField(blank=True, max_length=255, null=True)),
                ('primer_reverse', models.CharField(blank=True, max_length=255, null=True)),
                ('run_type', models.CharField(blank=True, max_length=50, null=True)),
                ('seqData_url', models.URLField(blank=True, null=True)),
                ('seqData_accessionNumber', models.CharField(blank=True, max_length=50, null=True)),
                ('seqData_projectNumber', models.CharField(blank=True, max_length=50, null=True)),
                ('seqData_runNumber', models.CharField(blank=True, max_length=50, null=True)),
                ('seqData_sampleNumber', models.CharField(blank=True, max_length=50, null=True)),
                ('seqData_numberOfBases', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Sequences',
                'ordering': ['sequence_name'],
            },
        ),
        migrations.CreateModel(
            name='units',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('html_tag', models.CharField(max_length=200)),
            ],
            options={
                'verbose_name_plural': 'Units',
            },
        ),
        migrations.CreateModel(
            name='Variable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('var_type', models.CharField(blank=True, choices=[('TXT', 'Text'), ('NUM', 'Numeric')], max_length=40, null=True)),
                ('method', models.ManyToManyField(blank=True, to='polaaar.sampling_method')),
                ('var_units', models.ManyToManyField(blank=True, to='polaaar.units')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Taxa',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('TaxonRank', models.CharField(blank=True, choices=[('Kingdom', 'Kingdom'), ('SubKingdom', 'SubKingdom'), ('Phylum', 'Phylum'), ('SubPhylum', 'SubPhylum'), ('Class', 'Class'), ('SubClass', 'SubClass'), ('Order', 'Order'), ('SubOrder', 'SubOrder'), ('Family', 'Family'), ('SubFamily', 'SubFamily'), ('Genus', 'Genus'), ('SubGenus', 'SubGenus'), ('Species', 'Species'), ('SubSpecies', 'SubSpecies'), ('Strain', 'Strain')], max_length=100, null=True)),
                ('taxonID', models.CharField(blank=True, max_length=100, null=True)),
                ('parent_taxa', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='TaxonName', to='polaaar.Taxa')),
            ],
            options={
                'verbose_name_plural': 'Taxa',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Reference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('authors_list', models.TextField()),
                ('doi', models.CharField(blank=True, max_length=255, null=True)),
                ('short_authors', models.CharField(max_length=150)),
                ('title', models.TextField()),
                ('journal', models.TextField()),
                ('year', models.IntegerField()),
                ('occurrences', models.ManyToManyField(blank=True, to='polaaar.Occurrence')),
            ],
            options={
                'ordering': ['-year'],
            },
        ),
        migrations.CreateModel(
            name='ProjectMetadata',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project_name', models.CharField(max_length=255)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('EML_URL', models.URLField(blank=True, null=True)),
                ('abstract', models.TextField(blank=True, null=True)),
                ('bounding_box', django.contrib.gis.db.models.fields.PolygonField(blank=True, null=True, srid=4326)),
                ('is_public', models.BooleanField()),
                ('associated_media', models.TextField(blank=True, null=True)),
                ('created_on', models.DateField()),
                ('updated_on', models.DateField(auto_now=True)),
                ('project_qaqc', models.BooleanField(blank=True, null=True)),
                ('associated_references', models.ManyToManyField(blank=True, to='polaaar.Reference')),
                ('project_creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['project_name'],
            },
        ),
        migrations.CreateModel(
            name='ParentEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('created_on', models.DateField()),
                ('updated_on', models.DateField(auto_now=True)),
                ('event_creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('event_type', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='polaaar.EventType')),
                ('parent_event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='EventRank', to='polaaar.ParentEvent')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='polaaar.ProjectMetadata')),
            ],
            options={
                'ordering': ['event_name'],
            },
        ),
        migrations.AddField(
            model_name='occurrence',
            name='associated_sequences',
            field=models.ManyToManyField(blank=True, to='polaaar.Sequences'),
        ),
        migrations.AddField(
            model_name='occurrence',
            name='taxon',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='polaaar.Taxa'),
        ),
        migrations.CreateModel(
            name='Metadata',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metadata_tag', models.CharField(blank=True, max_length=255, null=True)),
                ('md_created_on', models.DateField()),
                ('license', models.CharField(blank=True, max_length=100, null=True)),
                ('continent', models.CharField(choices=[('NA', 'North America'), ('SA', 'South America'), ('EU', 'Europe'), ('OC', 'Oceania'), ('AN', 'Antarctica'), ('AS', 'Asia'), ('AF', 'Africa')], max_length=50)),
                ('country', django_countries.fields.CountryField(blank=True, max_length=2, null=True)),
                ('state_province', models.CharField(blank=True, max_length=70, null=True)),
                ('waterBody', models.CharField(blank=True, max_length=150, null=True)),
                ('islandGroup', models.CharField(blank=True, max_length=150, null=True)),
                ('island', models.CharField(blank=True, max_length=150, null=True)),
                ('location', models.CharField(blank=True, max_length=50, null=True)),
                ('geo_loc_name', models.CharField(blank=True, max_length=50, null=True)),
                ('additional_info', models.TextField(blank=True, null=True)),
                ('env_feature', models.CharField(blank=True, max_length=50, null=True)),
                ('env_material', models.CharField(blank=True, max_length=50, null=True)),
                ('institutionID', models.CharField(blank=True, max_length=255, null=True)),
                ('nucl_acid_amp', models.CharField(blank=True, max_length=255, null=True)),
                ('nucl_acid_ext', models.CharField(blank=True, max_length=255, null=True)),
                ('ref_biomaterial', models.CharField(blank=True, max_length=50, null=True)),
                ('rel_to_oxygen', models.CharField(blank=True, max_length=50, null=True)),
                ('rightsHolder', models.CharField(blank=True, max_length=50, null=True)),
                ('samp_collect_device', models.CharField(blank=True, max_length=50, null=True)),
                ('samp_store_dur', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True)),
                ('samp_store_loc', models.CharField(blank=True, max_length=50, null=True)),
                ('samp_store_temp', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True)),
                ('samp_vol_we_dna_ext', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True)),
                ('samplingProtocol', models.CharField(blank=True, max_length=255, null=True)),
                ('source_mat_id', models.CharField(blank=True, max_length=50, null=True)),
                ('submitted_to_insdc', models.BooleanField(blank=True, null=True)),
                ('investigation_type', models.CharField(blank=True, max_length=50, null=True)),
                ('isol_growth_condt', models.CharField(blank=True, max_length=255, null=True)),
                ('lib_size', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True)),
                ('env_biome', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='polaaar.Biome')),
                ('env_package', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='polaaar.package')),
                ('metadata_creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('sequence', models.ManyToManyField(blank=True, to='polaaar.Sequences')),
            ],
            options={
                'verbose_name_plural': 'Metadata',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('footprintWKT', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
                ('eventRemarks', models.TextField(blank=True, null=True)),
                ('sample_name', models.CharField(max_length=255, unique=True)),
                ('collection_date', models.DateField()),
                ('collection_time', models.TimeField()),
                ('resource_relationship', models.TextField(blank=True, null=True)),
                ('samplingProtocol', models.TextField(blank=True, null=True)),
                ('metadata_exists', models.BooleanField(blank=True, null=True)),
                ('occurrence_exists', models.BooleanField(blank=True, null=True)),
                ('environment_exists', models.BooleanField(blank=True, null=True)),
                ('environment', models.ManyToManyField(blank=True, to='polaaar.Environment')),
                ('metadata', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='polaaar.Metadata')),
                ('occurrence', models.ManyToManyField(blank=True, to='polaaar.Occurrence')),
                ('parent_event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polaaar.ParentEvent')),
                ('parent_sample', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='polaaar.Event')),
            ],
            options={
                'ordering': ['-collection_date', '-collection_time'],
            },
        ),
        migrations.AddField(
            model_name='environment',
            name='env_method',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='polaaar.sampling_method'),
        ),
        migrations.AddField(
            model_name='environment',
            name='env_units',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='polaaar.units'),
        ),
        migrations.AddField(
            model_name='environment',
            name='env_variable',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='polaaar.Variable'),
        ),
        migrations.AddField(
            model_name='environment',
            name='sequences',
            field=models.ManyToManyField(blank=True, to='polaaar.Sequences'),
        ),
    ]
